// Generated by CoffeeScript 1.4.0
(function() {
  var BAMBOO_WAIT_TIME, MAX_READY_RETRIES, callAjax, data_ready_callback, most_recent_ajax_call_arg, most_recent_ajax_call_arg_keys, retry_count, test_data, wait_time;

  test_data = {
    csv_file: "https://raw.github.com/modilabs/bamboo.js/master/public/csv/sample_dataset_school_survey.csv",
    csv_file_merge: "https://raw.github.com/modilabs/bamboo.js/master/public/csv/sample_merge.csv",
    csv_file_join: "https://raw.github.com/modilabs/bamboo.js/master/public/csv/sample_join.csv"
  };

  BAMBOO_WAIT_TIME = 8000;

  wait_time = BAMBOO_WAIT_TIME;

  MAX_READY_RETRIES = 4;

  retry_count = 0;

  callAjax = function(xhrSettings) {
    var method, response;
    method = xhrSettings.type ? xhrSettings.type : "GET";
    try {
      response = mock_data.urls[xhrSettings.url][method];
      if (response === void 0) {
        throw new TypeError("urls." + xhrSettings.url + "." + method + " is not defined.");
      }
      xhrSettings.success.call(null, response);
    } catch (err) {
      xhrSettings.error.call();
    }
  };

  data_ready_callback = function(response) {
    var _this = this;
    if (response.state === "pending" && retry_count++ < MAX_READY_RETRIES) {
      setTimeout(function() {
        return _this.query_info(data_ready_callback);
      }, Math.round(wait_time / MAX_READY_RETRIES));
    } else {
      retry_count = 0;
    }
  };

  most_recent_ajax_call_arg = function(arg_index, param) {
    return $.ajax.mostRecentCall.args[arg_index][param];
  };

  most_recent_ajax_call_arg_keys = function(arg_index, param) {
    return _.keys(most_recent_ajax_call_arg(arg_index, param));
  };

  describe("Bamboo API", function() {
    beforeEach(function() {
      if (bamboo.settings.URL.match(/^http/)) {
        spyOn($, 'ajax').andCallThrough();
      } else {
        spyOn($, 'ajax').andCallFake(callAjax);
        wait_time = 0;
      }
    });
    it("distinguishes aggregations from calculations", function() {
      var false_st, false_st_2, true_st;
      true_st = bamboo.is_aggregation("sum(formula)");
      expect(true_st).toBeTruthy();
      false_st = bamboo.is_aggregation("murica");
      expect(false_st).not.toBeTruthy();
      false_st_2 = bamboo.is_aggregation("sum())");
      expect(false_st_2).not.toBeTruthy();
    });
    describe("Datasets", function() {
      it("can create from url", function() {
        var dataset;
        dataset = new bamboo.Dataset({
          url: test_data.csv_file,
          autoload: true
        });
        expect(dataset.id).toBeDefined();
      });
      it("can delete by dataset id", function() {
        var dataset, deleted;
        dataset = new bamboo.Dataset({
          url: test_data.csv_file,
          autoload: true
        });
        expect(dataset.id).toBeDefined();
        deleted = dataset["delete"]();
        expect(deleted).toBeTruthy();
      });
      it("can check if dataset exists", function() {
        var dataset, exists;
        dataset = new bamboo.Dataset({
          url: test_data.csv_file,
          autoload: true
        });
        expect(dataset.id).toBeDefined();
        exists = bamboo.dataset_exists(dataset.id);
        expect(exists).toBeTruthy();
        exists = bamboo.dataset_exists("some-none-existsent-id");
        expect(exists).toBeFalsy();
      });
    });
    describe("Data APIs", function() {
      var dataset, loaded;
      loaded = false;
      dataset = void 0;
      beforeEach(function() {
        dataset = new bamboo.Dataset({
          url: test_data.csv_file,
          autoload: false
        });
        runs(function() {
          loaded = false;
          dataset.load_from_url(false, function() {
            return loaded = true;
          });
        });
        waitsFor(function() {
          return loaded;
        }, "dataset to load", 2000);
        runs(function() {
          retry_count = 0;
          expect(dataset.id).toBeDefined();
          data_ready_callback.call(dataset, {
            state: "pending"
          });
        });
        waitsFor(function() {
          return dataset.info !== void 0 && dataset.info.state !== "pending";
        }, "dataset to be ready", BAMBOO_WAIT_TIME);
      });
      afterEach(function() {
        var deleted;
        deleted = dataset["delete"]();
        expect(deleted).toBeTruthy();
      });
      describe("Query API", function() {
        it("can query info", function() {
          expect(dataset.query_info().info.id).toBe(dataset.id);
          expect(dataset.info.num_rows).toBe(14);
        });
        it("can query data", function() {
          expect(dataset.data).not.toBeDefined();
          dataset.query_dataset();
          expect(dataset.data).toBeDefined();
        });
        it("can select from dataset", function() {
          var select;
          select = dataset.select({
            grade: 1
          });
          expect(select.length).toBe(14);
        });
        it("can run a filter query", function() {
          var query1;
          query1 = dataset.query({
            grade: 4
          });
          expect(query1.length).toBe(7);
        });
        it("can get the summary", function() {
          var group, select, summary;
          summary = dataset.summary();
          expect(dataset.summary_result).toBeDefined();
          select = {
            "grade": 1
          };
          summary = dataset.summary(select);
          expect(dataset._summaries["summary_" + (JSON.stringify(select))]).toBeDefined();
          group = "sex";
          summary = dataset.summary(select, group);
          expect(dataset._summaries["summary_" + (JSON.stringify(select)) + "_" + group]).toBeDefined();
        });
      });
      describe("Calculations API", function() {
        it("can add and remove simple calculation", function() {
          var calculation_name;
          loaded = false;
          calculation_name = "above_3rd_grade";
          runs(function() {
            dataset.add_calculation(calculation_name, "grade > 3", function() {
              return loaded = true;
            });
          });
          waitsFor(function() {
            return loaded;
          }, "calculation to be ready", 1000);
          runs(function() {
            var found_calculation;
            expect(dataset.calculations).toBeDefined();
            found_calculation = _.find(dataset.calculations, function(calculation) {
              return calculation.name === calculation_name;
            });
            expect(found_calculation).toBeDefined();
          });
          waits(wait_time);
          runs(function() {
            var found_calculation;
            dataset.remove_calculation(calculation_name);
            found_calculation = _.find(dataset.calculations, function(calculation) {
              return calculation.name === calculation_name;
            });
            expect(found_calculation).not.toBeDefined();
          });
        });
        it("can query calculations", function() {
          loaded = false;
          runs(function() {
            expect(dataset.calculations).not.toBeDefined();
            dataset.query_calculations(function() {
              loaded = true;
            });
          });
          waitsFor(function() {
            return loaded;
          }, "calculation's query to return", 1000);
          runs(function() {
            expect(dataset.calculations).toBeDefined();
          });
        });
      });
      describe("Aggreations API", function() {
        beforeEach(function() {
          var response;
          loaded = false;
          response = void 0;
          runs(function() {
            expect(dataset.aggregations).not.toBeDefined();
            dataset.add_aggregations("total_income", "sum(income)", null, function(r) {
              response = r;
              loaded = true;
            });
          });
          waitsFor(function() {
            return loaded;
          }, "add_aggregations to return", 1000);
          runs(function() {
            expect(response.success).toContain("created calculation");
          });
        });
        afterEach(function() {
          var response;
          response = void 0;
          runs(function() {
            dataset.remove_aggregations("total_income", function(r) {
              response = r;
            });
            expect(response.success).toContain("deleted calculation: 'total_income'");
          });
        });
        it("can query aggregations", function() {
          loaded = false;
          runs(function() {
            dataset.query_aggregations(function() {
              loaded = true;
            });
          });
          waitsFor(function() {
            return loaded;
          }, "query_aggregations to return", 1000);
          runs(function() {
            expect(dataset.aggregations).toBeDefined();
          });
        });
      });
      describe("Updates, joins and merges", function() {
        it("can update data in an dataset", function() {
          var response, update_data;
          response = void 0;
          update_data = {
            name: "new_student",
            grade: 1,
            income: 30,
            sex: "M"
          };
          runs(function() {
            dataset.update([update_data], function(r) {
              response = r;
            });
          });
          waitsFor(function() {
            return response !== void 0;
          }, "update call to return", 1000);
          runs(function() {
            expect(response.id).toBeDefined();
          });
        });
        it("can merge datasets", function() {
          var dataset_for_merge, merged_dataset;
          loaded = false;
          merged_dataset = void 0;
          dataset_for_merge = new bamboo.Dataset();
          runs(function() {
            return dataset_for_merge.load_from_url(test_data.csv_file_merge, function() {
              loaded = true;
            });
          });
          waitsFor(function() {
            return loaded;
          }, "load_from_url to return", 2000);
          runs(function() {
            retry_count = 0;
            expect(dataset_for_merge.id).toBeDefined();
            data_ready_callback.call(dataset_for_merge, {
              state: "pending"
            });
          });
          waitsFor(function() {
            return dataset_for_merge.info && dataset_for_merge.info.state === "ready";
          }, "dataset to be ready", BAMBOO_WAIT_TIME);
          runs(function() {
            dataset.merge([dataset.id, dataset_for_merge.id], function(result) {
              return merged_dataset = result;
            });
            expect(most_recent_ajax_call_arg_keys(0, "data")).toContain("dataset_ids");
          });
          waitsFor(function() {
            return merged_dataset !== void 0;
          }, "merge to return", 2000);
          runs(function() {
            expect(merged_dataset.id).toBeDefined();
            expect(dataset_for_merge["delete"]()).toBeTruthy();
            expect(merged_dataset["delete"]()).toBeTruthy();
          });
        });
        it("can join two datasets on a certain column", function() {
          var dataset_for_join, joined_dataset;
          loaded = false;
          joined_dataset = void 0;
          dataset_for_join = new bamboo.Dataset();
          runs(function() {
            return dataset_for_join.load_from_url(test_data.csv_file_join, function() {
              loaded = true;
            });
          });
          waitsFor(function() {
            return loaded;
          }, "load_from_url to return", 2000);
          runs(function() {
            retry_count = 0;
            data_ready_callback.call(dataset_for_join, {
              state: "pending"
            });
          });
          waitsFor(function() {
            return dataset_for_join.info && dataset_for_join.info.state === "ready";
          }, "dataset to be ready", BAMBOO_WAIT_TIME);
          runs(function() {
            var params;
            dataset.join(dataset.id, dataset_for_join.id, "name", function(result) {
              return joined_dataset = result;
            });
            params = most_recent_ajax_call_arg(0, "data");
            expect(params.dataset_id).toEqual(dataset.id);
            expect(params.other_dataset_id).toEqual(dataset_for_join.id);
            expect(params.on).toEqual("name");
          });
          waitsFor(function() {
            return joined_dataset !== void 0;
          }, "join to return", 2000);
          runs(function() {
            expect(joined_dataset.id).toBeDefined();
            expect(dataset_for_join["delete"]()).toBeTruthy();
            expect(joined_dataset["delete"]()).toBeTruthy();
          });
        });
      });
    });
  });

}).call(this);
