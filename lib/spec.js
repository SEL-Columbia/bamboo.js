// Generated by CoffeeScript 1.4.0
(function() {
  var available_opts, build_dataset, test_data, _pick,
    _this = this;

  test_data = {
    csv_file: "https://www.dropbox.com/s/0m8smn04oti92gr/sample_dataset_school_survey.csv?dl=1"
  };

  available_opts = {
    url: test_data.csv_file,
    autoload: true
  };

  build_dataset = function(keys) {
    return new bamboo.Dataset(_pick(available_opts, keys));
  };

  bamboo.settings.URL = "http://localhost:8080";

  describe("Bamboo API", function() {
    var dataset;
    dataset = null;
    beforeEach(function() {
      var done;
      done = false;
      runs(function() {
        if (dataset != null) {
          return done = true;
        } else {
          dataset = build_dataset(['url']);
          return dataset.load_from_url(false, function() {
            return done = true;
          });
        }
      });
      waitsFor(function() {
        return done;
      }, 1000);
      return runs(function() {
        return expect(dataset.id).toBeDefined();
      });
    });
    afterEach(function() {});
    it("wount autoload if not requested", function() {
      var temp_dataset;
      temp_dataset = build_dataset(['url']);
      return expect(temp_dataset.load_status('from_url')).toBe("not_started");
    });
    describe("Dataset API", function() {
      it("can query info synchronously", function() {
        var temp_dataset;
        temp_dataset = build_dataset(['url', 'autoload']);
        temp_dataset.query_info();
        return expect(temp_dataset.info.id).toBe(temp_dataset.id);
      });
      it("can query info async", function() {
        var done, info;
        done = false;
        info = null;
        runs(function() {
          return dataset.query_info(function(data) {
            info = data;
            return done = true;
          });
        });
        waitsFor(function() {
          return done;
        }, 1000);
        return runs(function() {
          return expect(info.id).toBe(dataset.id);
        });
      });
      it("can select from dataset", function() {
        var done, select;
        done = false;
        select = {
          grade: 1
        };
        runs(function() {
          return dataset.select(select, function(data) {
            return done = true;
          });
        });
        waitsFor(function() {
          return done;
        }, 1000);
        return runs(function() {
          var select_key;
          select_key = "select_" + JSON.stringify(select);
          return expect(dataset._selects[select_key]).toBeDefined();
        });
      });
      return it("can query from dataset", function() {
        var done, query;
        done = false;
        query = {
          grade: 4
        };
        runs(function() {
          return dataset.query(query, function(data) {
            return done = true;
          });
        });
        waitsFor(function() {
          return done;
        }, 1000);
        return runs(function() {
          var query_key;
          query_key = "query_" + JSON.stringify(query);
          return expect(dataset._queries[query_key]).toBeDefined();
        });
      });
    });
    describe("Summaries", function() {
      it("can get the summary for all", function() {
        var done, select;
        done = false;
        select = "all";
        waits(10000);
        runs(function() {
          return dataset.summary("all", null, function(data) {
            return done = true;
          });
        });
        waitsFor(function() {
          return done;
        }, 1000);
        return runs(function() {
          var summary_key;
          summary_key = "summary_" + select;
          return expect(dataset._summaries[summary_key]).toBeDefined();
        });
      });
      return it("can get the summary with select and group", function() {
        var done, group, select;
        done = false;
        select = {
          "income": 1
        };
        group = "sex";
        waits(5000);
        runs(function() {
          return dataset.summary(select, group, function(data) {
            return done = true;
          });
        });
        waitsFor(function() {
          return done;
        }, 1000);
        return runs(function() {
          var summary_key;
          summary_key = "summary_" + JSON.stringify(select);
          expect(dataset._summaries[summary_key]).toBeDefined();
          return expect(dataset._summaries[summary_key][group]).toBeDefined();
        });
      });
    });
    return describe("Calculations", function() {
      it("can add and query calculations", function() {
        waits(8000);
        runs(function() {
          return dataset.add_calculation("above_3rd_grade", "grade > 3");
        });
        waits(3000);
        return runs(function() {
          dataset.query_calculations();
          expect(dataset.calculations).toBeDefined();
          expect(dataset.calculations[0]).toBeDefined();
          return expect(dataset.calculations[0].name).toEqual("above_3rd_grade");
        });
      });
      return it("can add and query aggregations", function() {
        waits(8000);
        runs(function() {
          return dataset.add_calculation("total_income", "sum(income)");
        });
        waits(3000);
        return runs(function() {
          dataset.query_aggregations();
          expect(dataset.aggregations).toBeDefined();
          return expect(dataset.aggregations[""]).toBeDefined();
        });
      });
    });
  });

  /*
  based on underscore.js _.pick
  */


  _pick = function(obj) {
    var copy, key, keys, _i, _len;
    copy = {};
    keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if (obj[key] != null) {
        copy[key] = obj[key];
      }
    }
    return copy;
  };

}).call(this);
