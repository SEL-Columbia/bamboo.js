// Generated by CoffeeScript 1.4.0
(function() {
  var BAMBOO_WAIT_TIME, MAX_READY_RETRIES, aggregations_ready_callback, callAjax, data_ready_callback, most_recent_ajax_call_arg, most_recent_ajax_call_arg_keys, retry_count, test_data, wait_time;

  test_data = {
    csv_file_url: "https://raw.github.com/modilabs/bamboo.js/master/public/csv/sample_dataset_school_survey.csv",
    csv_file_merge_url: "https://raw.github.com/modilabs/bamboo.js/master/public/csv/sample_merge.csv",
    csv_file_join_url: "https://raw.github.com/modilabs/bamboo.js/master/public/csv/sample_join.csv"
  };

  BAMBOO_WAIT_TIME = 8000;

  wait_time = BAMBOO_WAIT_TIME;

  MAX_READY_RETRIES = 4;

  retry_count = 0;

  callAjax = function(xhrSettings) {
    var method, params, promise, response;
    method = xhrSettings.type ? xhrSettings.type : "GET";
    params = void 0;
    if (method === "GET") {
      params = [];
      _.each(xhrSettings.data, function(val, key) {
        params.push(key + "=" + val);
      });
      params = params.join("&");
    }
    if (params) {
      xhrSettings.url += "?" + params;
    }
    promise = {
      then: function(successCallback, errorCallBack) {
        if (this.response) {
          successCallback.call(null, this.response);
        } else if (this.error) {
          errorCallBack.call(this.error);
        }
      }
    };
    try {
      response = mock_data.urls[xhrSettings.url][method];
      if (response === void 0) {
        throw new TypeError("urls." + xhrSettings.url + "." + method + " is not defined.");
      }
      promise.response = response;
    } catch (err) {
      promise.error = err;
    }
    return promise;
  };

  data_ready_callback = function() {
    var _this = this;
    if (this.state === "pending" && retry_count++ < MAX_READY_RETRIES) {
      setTimeout(function() {
        var promise;
        promise = bamboo.query_info(_this.id);
        return promise.then(function(data) {
          _this.state = data.state;
          data_ready_callback.call(_this);
        });
      }, Math.round(wait_time / MAX_READY_RETRIES));
    } else {
      retry_count = 0;
    }
  };

  aggregations_ready_callback = function(response) {
    var _this = this;
    if (JSON.stringify(response) === "{}" && retry_count++ < MAX_READY_RETRIES) {
      setTimeout(function() {
        return _this.query_aggregations(data_ready_callback);
      }, Math.round(wait_time / MAX_READY_RETRIES));
    } else {
      retry_count = 0;
    }
  };

  most_recent_ajax_call_arg = function(arg_index, param) {
    return $.ajax.mostRecentCall.args[arg_index][param];
  };

  most_recent_ajax_call_arg_keys = function(arg_index, param) {
    return _.keys(most_recent_ajax_call_arg(arg_index, param));
  };

  describe("Bamboo JS", function() {
    beforeEach(function() {
      if (bamboo.settings.URL.match(/^http/)) {
        spyOn($, 'ajax').andCallThrough();
      } else {
        spyOn($, 'ajax').andCallFake(callAjax);
        wait_time = 0;
      }
    });
    it("distinguishes aggregations from calculations", function() {
      var false_st, false_st_2, true_st;
      true_st = bamboo.is_aggregation("sum(formula)");
      expect(true_st).toBeTruthy();
      false_st = bamboo.is_aggregation("murica");
      expect(false_st).not.toBeTruthy();
      false_st_2 = bamboo.is_aggregation("sum())");
      expect(false_st_2).not.toBeTruthy();
    });
    describe("URLs", function() {
      it("generates a /<section> url when section is the only param", function() {
        expect(bamboo.bamboo_url('datasets')).toEqual(bamboo.settings.URL + "/datasets");
      });
    });
    describe("_run_query", function() {
      it("runs asynchronously by default", function() {
        var async_arg, promise;
        promise = bamboo.create_dataset(test_data.csv_file_url);
        async_arg = most_recent_ajax_call_arg(0, 'async');
        expect(async_arg).toBeTruthy();
      });
      it("run synchronously if requested", function() {
        var async_arg, promise;
        promise = bamboo.create_dataset(test_data.csv_file_url, false);
        async_arg = most_recent_ajax_call_arg(0, 'async');
        expect(async_arg).toBeFalsy();
      });
    });
    describe("Create", function() {
      it("can create dataset from a URL, query for its info and delete it", function() {
        var dataset_id, dataset_info;
        dataset_id = void 0;
        dataset_info = void 0;
        runs(function() {
          var promise;
          promise = bamboo.create_dataset(test_data.csv_file_url);
          promise.then(function(data) {
            return dataset_id = data.id;
          });
        });
        waitsFor(function() {
          return !!dataset_id;
        }, "dataset to be created", 2000);
        runs(function() {
          var promise;
          promise = bamboo.query_info(dataset_id);
          promise.then(function(response) {
            return dataset_info = response;
          });
        });
        waitsFor(function() {
          return !!dataset_info;
        }, "the dataset's info", 2000);
        runs(function() {
          var promise;
          expect(dataset_info.state).toBeDefined();
          expect(dataset_id).toBeDefined();
          promise = bamboo.delete_dataset(dataset_id);
          promise.then(function() {
            return dataset_id = void 0;
          });
        });
        waitsFor(function() {
          return !dataset_id;
        }, "dataset to be deleted", 2000);
      });
    });
    describe("Manage", function() {
      var dataset_id, dataset_info;
      dataset_id = void 0;
      dataset_info = void 0;
      beforeEach(function() {
        runs(function() {
          var promise;
          promise = bamboo.create_dataset(test_data.csv_file_url);
          promise.then(function(data) {
            return dataset_id = data.id;
          });
        });
        waitsFor(function() {
          return !!dataset_id;
        }, "dataset to be created", 2000);
        runs(function() {
          retry_count = 0;
          expect(dataset_id).toBeDefined();
          dataset_info = {
            id: dataset_id,
            state: "pending"
          };
          data_ready_callback.call(dataset_info);
        });
        waitsFor(function() {
          return dataset_info !== void 0 && dataset_info.state !== "pending";
        }, "dataset to be ready", BAMBOO_WAIT_TIME);
      });
      afterEach(function() {
        runs(function() {
          var promise;
          expect(dataset_id).toBeDefined();
          promise = bamboo.delete_dataset(dataset_id);
          promise.then(function(response) {
            return dataset_id = void 0;
          });
        });
        waitsFor(function() {
          return !dataset_id;
        }, "dataset to be deleted", 2000);
        runs(function() {
          return expect(dataset_id).toBeUndefined();
        });
      });
      describe("Query", function() {
        it("can query for all the data", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id);
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(14);
          });
        });
        it("can query with a filter", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id, {
              grade: 4
            });
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(7);
          });
        });
        it("can select specific fields", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id, null, {
              grade: 1
            });
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(14);
            expect(data[0].grade).toBeDefined();
            expect(data[0].sex).toBeUndefined();
          });
        });
        it("can apply a limit", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id, null, null, 3);
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(3);
            expect(data[0].grade).toBeDefined();
            expect(data[0].sex).toBeDefined();
          });
        });
        it("can select specific fields and apply a filter", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id, {
              grade: 4
            }, {
              grade: 1
            });
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(7);
            expect(data[0].grade).toBeDefined();
            expect(data[0].sex).toBeUndefined();
          });
        });
        it("can select specific fields, apply a filter and apply a limit", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id, {
              grade: 4
            }, {
              grade: 1
            }, 3);
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(3);
            expect(data[0].grade).toBeDefined();
            expect(data[0].sex).toBeUndefined();
          });
        });
      });
      describe("Summary", function() {
        it("can query the datasets summary for all fields", function() {
          var summary;
          summary = void 0;
          runs(function() {
            var promise;
            promise = bamboo.summary(dataset_id);
            promise.then(function(response) {
              summary = response;
            });
          });
          waitsFor(function() {
            return !!summary;
          }, "summary to load");
          runs(function() {
            expect(summary.name).toBeDefined();
            expect(summary.grade).toBeDefined();
          });
        });
        it("can query the datasets summary for specified fields", function() {
          var summary;
          summary = void 0;
          runs(function() {
            var promise;
            promise = bamboo.summary(dataset_id, {
              grade: 1
            });
            promise.then(function(response) {
              summary = response;
            });
          });
          waitsFor(function() {
            return !!summary;
          }, "summary to load");
          runs(function() {
            expect(summary.grade).toBeDefined();
            expect(summary.name).toBeUndefined();
          });
        });
        it("can query the datasets summary with a grouping", function() {
          var summary;
          summary = void 0;
          runs(function() {
            var promise;
            promise = bamboo.summary(dataset_id, {
              grade: 1
            }, "sex");
            promise.then(function(response) {
              summary = response;
            });
          });
          waitsFor(function() {
            return !!summary;
          }, "summary to load");
          runs(function() {
            expect(summary.sex.M.grade).toBeDefined();
            expect(summary.sex.F.grade).toBeDefined();
          });
        });
      });
      describe("Calculations", function() {
        it("can create and remove a calculation", function() {
          var message;
          message = void 0;
          runs(function() {
            var promise;
            promise = bamboo.add_calculation(dataset_id, "above_3rd_grade", "grade > 3");
            promise.then(function(response) {
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Calculation to be added", 2000);
          runs(function() {
            var promise;
            expect(message).toBeDefined();
            message = void 0;
            promise = bamboo.remove_calculation(dataset_id, "above_3rd_grade");
            return promise.then(function(response) {
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Calculation to be removed", 2000);
          runs(function() {
            expect(message.success).toBeDefined();
          });
        });
        it("can query for calculations", function() {
          var calculations;
          calculations = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query_calculations(dataset_id);
            promise.then(function(response) {
              calculations = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!calculations;
          }, "Calculations to be retrieved", 2000);
          runs(function() {
            expect(calculations).toBeDefined();
          });
        });
      });
      describe("Aggregations", function() {
        it("can add and remove an aggregation without groups", function() {
          var message;
          message = void 0;
          runs(function() {
            var promise;
            promise = bamboo.add_aggregation(dataset_id, "total_income", "sum(income)", null);
            promise.then(function(response) {
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Aggregation to be added", 2000);
          runs(function() {
            var promise;
            expect(message).toBeDefined();
            message = void 0;
            promise = bamboo.remove_aggregation(dataset_id, "total_income");
            return promise.then(function(response) {
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Aggregation to be removed", 2000);
          runs(function() {
            expect(message.success).toBeDefined();
          });
        });
        it("can add and remove an aggregation with groups", function() {
          var message, timedout;
          message = void 0;
          timedout = false;
          runs(function() {
            var promise;
            promise = bamboo.add_aggregation(dataset_id, "total_income", "sum(income)", ['sex']);
            promise.then(function(response) {
              var data;
              data = most_recent_ajax_call_arg(0, 'data');
              expect(data).toBeDefined();
              expect(data.group).toBeDefined();
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Aggregation to be added", 2000);
          waitsFor(function() {
            setTimeout(function() {
              timedout = true;
            }, 1000);
            return timedout;
          }, "timeout", 1000);
          runs(function() {
            var promise;
            expect(message).toBeDefined();
            message = void 0;
            promise = bamboo.remove_aggregation(dataset_id, "total_income");
            return promise.then(function(response) {
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Aggregation to be removed", 2000);
          runs(function() {
            expect(message.success).toBeDefined();
          });
        });
        it("can query for aggregations", function() {
          var aggregations;
          aggregations = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query_aggregations(dataset_id);
            promise.then(function(response) {
              aggregations = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!aggregations;
          }, "Aggregations to load", 2000);
          runs(function() {
            return expect(aggregations).toBeDefined();
          });
        });
      });
    });
  });

}).call(this);
