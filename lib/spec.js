// Generated by CoffeeScript 1.4.0
(function() {
  var BAMBOO_WAIT_TIME, MAX_READY_RETRIES, REQUEST_TIME, aggregations_ready_callback, callAjax, data_ready_callback, most_recent_ajax_call_arg, most_recent_ajax_call_arg_keys, retry_count, test_data, wait_time;

  test_data = {
    csv_file_url: "https://raw.github.com/modilabs/bamboo.js/master/public/csv/sample_dataset_school_survey.csv",
    csv_file_merge_url: "https://raw.github.com/modilabs/bamboo.js/master/public/csv/sample_merge.csv",
    csv_file_join_url: "https://raw.github.com/modilabs/bamboo.js/master/public/csv/sample_join.csv"
  };

  BAMBOO_WAIT_TIME = 8000;

  wait_time = BAMBOO_WAIT_TIME;

  REQUEST_TIME = 3000;

  MAX_READY_RETRIES = 4;

  retry_count = 0;

  callAjax = function(xhrSettings) {
    var method, params, promise, response;
    method = xhrSettings.type ? xhrSettings.type : "GET";
    params = void 0;
    if (method === "GET") {
      params = [];
      _.each(xhrSettings.data, function(val, key) {
        params.push(key + "=" + val);
      });
      params = params.join("&");
    }
    if (params) {
      xhrSettings.url += "?" + params;
    }
    promise = {
      then: function(successCallback, errorCallBack) {
        if (this.response) {
          successCallback.call(null, this.response);
        } else if (this.error) {
          errorCallBack.call(this.error);
        }
      }
    };
    try {
      response = mock_data.urls[xhrSettings.url][method];
      if (response === void 0) {
        throw new TypeError("urls." + xhrSettings.url + "." + method + " is not defined.");
      }
      promise.response = response;
    } catch (err) {
      promise.error = err;
    }
    return promise;
  };

  data_ready_callback = function() {
    var _this = this;
    if (this.state === "pending" && retry_count++ < MAX_READY_RETRIES) {
      setTimeout(function() {
        var promise;
        promise = bamboo.query_info(_this.id);
        return promise.then(function(data) {
          _this.state = data.state;
          data_ready_callback.call(_this);
        });
      }, Math.round(wait_time / MAX_READY_RETRIES));
    } else {
      retry_count = 0;
    }
  };

  aggregations_ready_callback = function(response) {
    var _this = this;
    if (JSON.stringify(response) === "{}" && retry_count++ < MAX_READY_RETRIES) {
      setTimeout(function() {
        return _this.query_aggregations(data_ready_callback);
      }, Math.round(wait_time / MAX_READY_RETRIES));
    } else {
      retry_count = 0;
    }
  };

  most_recent_ajax_call_arg = function(arg_index, param) {
    return $.ajax.mostRecentCall.args[arg_index][param];
  };

  most_recent_ajax_call_arg_keys = function(arg_index, param) {
    return _.keys(most_recent_ajax_call_arg(arg_index, param));
  };

  describe("Bamboo JS", function() {
    beforeEach(function() {
      if (bamboo.settings.URL.match(/^http/)) {
        spyOn($, 'ajax').andCallThrough();
      } else {
        spyOn($, 'ajax').andCallFake(callAjax);
        wait_time = 0;
      }
    });
    it("distinguishes aggregations from calculations", function() {
      var false_st, false_st_2, true_st;
      true_st = bamboo.is_aggregation("sum(formula)");
      expect(true_st).toBeTruthy();
      false_st = bamboo.is_aggregation("murica");
      expect(false_st).not.toBeTruthy();
      false_st_2 = bamboo.is_aggregation("sum())");
      expect(false_st_2).not.toBeTruthy();
    });
    describe("URLs", function() {
      it("generates a /<section> url when section is the only param", function() {
        expect(bamboo.bamboo_url('datasets')).toEqual(bamboo.settings.URL + "/datasets");
      });
    });
    describe("_run_query", function() {
      it("runs asynchronously by default", function() {
        var async_arg, promise;
        promise = bamboo.create_dataset(test_data.csv_file_url);
        async_arg = most_recent_ajax_call_arg(0, 'async');
        expect(async_arg).toBeTruthy();
      });
      it("run synchronously if requested", function() {
        var async_arg, promise;
        promise = bamboo.create_dataset(test_data.csv_file_url, false);
        async_arg = most_recent_ajax_call_arg(0, 'async');
        expect(async_arg).toBeFalsy();
      });
    });
    describe("Create", function() {
      it("can create dataset from a URL, query for its info and delete it", function() {
        var dataset_id, dataset_info;
        dataset_id = void 0;
        dataset_info = void 0;
        runs(function() {
          var promise;
          promise = bamboo.create_dataset(test_data.csv_file_url);
          promise.then(function(data) {
            return dataset_id = data.id;
          });
        });
        waitsFor(function() {
          return !!dataset_id;
        }, "dataset to be created", REQUEST_TIME);
        runs(function() {
          var promise;
          promise = bamboo.query_info(dataset_id);
          promise.then(function(response) {
            return dataset_info = response;
          });
        });
        waitsFor(function() {
          return !!dataset_info;
        }, "the dataset's info", REQUEST_TIME);
        runs(function() {
          var promise;
          expect(dataset_info.state).toBeDefined();
          expect(dataset_id).toBeDefined();
          promise = bamboo.delete_dataset(dataset_id);
          promise.then(function() {
            return dataset_id = void 0;
          });
        });
        waitsFor(function() {
          return !dataset_id;
        }, "dataset to be deleted", REQUEST_TIME);
      });
    });
    describe("Manage", function() {
      var dataset_id, join_dataset_info;
      dataset_id = void 0;
      join_dataset_info = void 0;
      beforeEach(function() {
        runs(function() {
          var promise;
          promise = bamboo.create_dataset(test_data.csv_file_url);
          promise.then(function(data) {
            return dataset_id = data.id;
          });
        });
        waitsFor(function() {
          return !!dataset_id;
        }, "dataset to be created", REQUEST_TIME);
        runs(function() {
          retry_count = 0;
          expect(dataset_id).toBeDefined();
          join_dataset_info = {
            id: dataset_id,
            state: "pending"
          };
          data_ready_callback.call(join_dataset_info);
        });
        waitsFor(function() {
          return join_dataset_info !== void 0 && join_dataset_info.state !== "pending";
        }, "dataset to be ready", BAMBOO_WAIT_TIME);
      });
      afterEach(function() {
        runs(function() {
          var promise;
          expect(dataset_id).toBeDefined();
          promise = bamboo.delete_dataset(dataset_id);
          promise.then(function(response) {
            return dataset_id = void 0;
          });
        });
        waitsFor(function() {
          return !dataset_id;
        }, "dataset to be deleted", REQUEST_TIME);
        runs(function() {
          return expect(dataset_id).toBeUndefined();
        });
      });
      describe("Existence", function() {
        it("returns true if a dataset exists", function() {
          var exists;
          exists = void 0;
          runs(function() {
            var promise;
            promise = bamboo.dataset_exists(dataset_id);
            return promise.then(function(response) {
              exists = response;
            });
          });
          waitsFor(function() {
            return exists !== void 0;
          }, "dataset_exists to return", REQUEST_TIME);
          runs(function() {
            expect(exists).toBe(true);
          });
        });
        it("returns false if a dataset doesnt exist", function() {
          var exists;
          exists = void 0;
          runs(function() {
            var promise;
            promise = bamboo.dataset_exists("12345");
            return promise.then(function(response) {
              exists = response;
            });
          });
          waitsFor(function() {
            return exists !== void 0;
          }, "dataset_exists to return", REQUEST_TIME);
          runs(function() {
            expect(exists).toBe(false);
          });
        });
        it("returns immediately async is false", function() {
          var exists;
          exists = bamboo.dataset_exists(dataset_id, false);
          expect(exists).toBe(true);
        });
      });
      describe("Query", function() {
        it("can query for all the data", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id);
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(14);
          });
        });
        it("can query with a filter", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id, {
              grade: 4
            });
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(7);
          });
        });
        it("can select specific fields", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id, null, {
              grade: 1
            });
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(14);
            expect(data[0].grade).toBeDefined();
            expect(data[0].sex).toBeUndefined();
          });
        });
        it("can apply a limit", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id, null, null, 3);
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(3);
            expect(data[0].grade).toBeDefined();
            expect(data[0].sex).toBeDefined();
          });
        });
        it("can select specific fields and apply a filter", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id, {
              grade: 4
            }, {
              grade: 1
            });
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(7);
            expect(data[0].grade).toBeDefined();
            expect(data[0].sex).toBeUndefined();
          });
        });
        it("can select specific fields, apply a filter and apply a limit", function() {
          var data;
          data = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query(dataset_id, {
              grade: 4
            }, {
              grade: 1
            }, 3);
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          });
          runs(function() {
            expect(data.length).toEqual(3);
            expect(data[0].grade).toBeDefined();
            expect(data[0].sex).toBeUndefined();
          });
        });
      });
      describe("Summary", function() {
        it("can query the datasets summary for all fields", function() {
          var summary;
          summary = void 0;
          runs(function() {
            var promise;
            promise = bamboo.summary(dataset_id);
            promise.then(function(response) {
              summary = response;
            });
          });
          waitsFor(function() {
            return !!summary;
          }, "summary to load");
          runs(function() {
            expect(summary.name).toBeDefined();
            expect(summary.grade).toBeDefined();
          });
        });
        it("can query the datasets summary for specified fields", function() {
          var summary;
          summary = void 0;
          runs(function() {
            var promise;
            promise = bamboo.summary(dataset_id, {
              grade: 1
            });
            promise.then(function(response) {
              summary = response;
            });
          });
          waitsFor(function() {
            return !!summary;
          }, "summary to load");
          runs(function() {
            expect(summary.grade).toBeDefined();
            expect(summary.name).toBeUndefined();
          });
        });
        it("can query the datasets summary with a grouping", function() {
          var summary;
          summary = void 0;
          runs(function() {
            var promise;
            promise = bamboo.summary(dataset_id, {
              grade: 1
            }, "sex");
            promise.then(function(response) {
              summary = response;
            });
          });
          waitsFor(function() {
            return !!summary;
          }, "summary to load");
          runs(function() {
            expect(summary.sex.M.grade).toBeDefined();
            expect(summary.sex.F.grade).toBeDefined();
          });
        });
      });
      describe("Calculations", function() {
        it("can create and remove a calculation", function() {
          var message;
          message = void 0;
          runs(function() {
            var promise;
            promise = bamboo.add_calculation(dataset_id, "above_3rd_grade", "grade > 3");
            promise.then(function(response) {
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Calculation to be added", REQUEST_TIME);
          runs(function() {
            var promise;
            expect(message).toBeDefined();
            message = void 0;
            promise = bamboo.remove_calculation(dataset_id, "above_3rd_grade");
            return promise.then(function(response) {
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Calculation to be removed", REQUEST_TIME);
          runs(function() {
            expect(message.success).toBeDefined();
          });
        });
        it("can query for calculations", function() {
          var calculations;
          calculations = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query_calculations(dataset_id);
            promise.then(function(response) {
              calculations = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!calculations;
          }, "Calculations to be retrieved", REQUEST_TIME);
          runs(function() {
            expect(calculations).toBeDefined();
          });
        });
      });
      describe("Aggregations", function() {
        it("can add and remove an aggregation without groups", function() {
          var message;
          message = void 0;
          runs(function() {
            var promise;
            promise = bamboo.add_aggregation(dataset_id, "total_income", "sum(income)", null);
            promise.then(function(response) {
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Aggregation to be added", REQUEST_TIME);
          runs(function() {
            var promise;
            expect(message).toBeDefined();
            message = void 0;
            promise = bamboo.remove_aggregation(dataset_id, "total_income");
            return promise.then(function(response) {
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Aggregation to be removed", REQUEST_TIME);
          runs(function() {
            expect(message.success).toBeDefined();
          });
        });
        it("can add and remove an aggregation with groups", function() {
          var message, wait_time_elapsed;
          message = void 0;
          wait_time_elapsed = false;
          runs(function() {
            var promise;
            promise = bamboo.add_aggregation(dataset_id, "total_income", "sum(income)", ['sex']);
            promise.then(function(response) {
              var data;
              data = most_recent_ajax_call_arg(0, 'data');
              expect(data).toBeDefined();
              expect(data.group).toBeDefined();
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Aggregation to be added", REQUEST_TIME);
          waitsFor(function() {
            setTimeout(function() {
              wait_time_elapsed = true;
            }, 1000);
            return wait_time_elapsed;
          }, "timeout", 1000);
          runs(function() {
            var promise;
            expect(message).toBeDefined();
            message = void 0;
            promise = bamboo.remove_aggregation(dataset_id, "total_income");
            return promise.then(function(response) {
              message = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!message;
          }, "Aggregation to be removed", REQUEST_TIME);
          runs(function() {
            expect(message.success).toBeDefined();
          });
        });
        it("can query for aggregations", function() {
          var aggregations;
          aggregations = void 0;
          runs(function() {
            var promise;
            promise = bamboo.query_aggregations(dataset_id);
            promise.then(function(response) {
              aggregations = response;
            }, function() {});
          });
          waitsFor(function() {
            return !!aggregations;
          }, "Aggregations to load", REQUEST_TIME);
          runs(function() {
            return expect(aggregations).toBeDefined();
          });
        });
      });
      describe("Updates", function() {
        it("can update data in an dataset", function() {
          var data, update_data;
          data = void 0;
          update_data = {
            name: "new_student",
            grade: 1,
            income: 30,
            sex: "M"
          };
          runs(function() {
            var promise;
            promise = bamboo.update(dataset_id, [update_data]);
            promise.then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          }, "Update call to return", REQUEST_TIME);
          runs(function() {
            expect(data).toBeDefined();
          });
        });
        it("can reset a dataset", function() {
          var reset_dataset_id;
          reset_dataset_id = void 0;
          runs(function() {
            var promise;
            promise = bamboo.reset(dataset_id, test_data.csv_file_merge_url);
            promise.then(function(response) {
              reset_dataset_id = response.id;
            });
          });
          waitsFor(function() {
            return !!reset_dataset_id;
          }, "Reset call to complete", REQUEST_TIME);
          runs(function() {
            expect(reset_dataset_id).toEqual(dataset_id);
          });
        });
      });
      describe("Joins and Merges", function() {
        var dataset_id_to_join, dataset_id_to_merge;
        dataset_id_to_join = void 0;
        dataset_id_to_merge = void 0;
        beforeEach(function() {
          var merge_dataset_info;
          join_dataset_info = void 0;
          merge_dataset_info = void 0;
          runs(function() {
            bamboo.create_dataset(test_data.csv_file_join_url).then(function(response) {
              dataset_id_to_join = response.id;
            });
            bamboo.create_dataset(test_data.csv_file_merge_url).then(function(response) {
              dataset_id_to_merge = response.id;
            });
          });
          waitsFor(function() {
            return !!dataset_id_to_join && !!dataset_id_to_merge;
          }, "Right datasets to be created", 4000);
          runs(function() {
            retry_count = 0;
            join_dataset_info = {
              id: dataset_id_to_join,
              state: "pending"
            };
            data_ready_callback.call(join_dataset_info);
          });
          waitsFor(function() {
            return join_dataset_info !== void 0 && join_dataset_info.state !== "pending";
          }, "right hand side dataset to be ready", BAMBOO_WAIT_TIME);
        });
        afterEach(function() {
          runs(function() {
            bamboo.delete_dataset(dataset_id_to_join).then(function() {
              dataset_id_to_join = void 0;
            });
            bamboo.delete_dataset(dataset_id_to_merge).then(function() {
              dataset_id_to_merge = void 0;
            });
          });
          waitsFor(function() {
            return !dataset_id_to_join && !dataset_id_to_merge;
          }, "Dataset to be deleted", REQUEST_TIME);
        });
        it("can join two datasets", function() {
          var joined_dataset_id;
          join_dataset_info = void 0;
          joined_dataset_id = void 0;
          runs(function() {
            var promise;
            promise = bamboo.join(dataset_id, dataset_id_to_join, "name");
            promise.then(function(response) {
              joined_dataset_id = response.id;
            });
          });
          waitsFor(function() {
            return !!joined_dataset_id;
          }, "Dataset to be joined", REQUEST_TIME);
          runs(function() {
            expect(joined_dataset_id).toBeDefined();
            retry_count = 0;
            join_dataset_info = {
              id: joined_dataset_id,
              state: "pending"
            };
            data_ready_callback.call(join_dataset_info);
          });
          waitsFor(function() {
            return join_dataset_info !== void 0 && join_dataset_info.state !== "pending";
          }, "joined dataset to be ready", BAMBOO_WAIT_TIME);
          runs(function() {
            bamboo.delete_dataset(joined_dataset_id);
          });
        });
        it("can merge two datasets", function() {
          var merged_dataset_id, merged_dataset_info;
          merged_dataset_id = void 0;
          merged_dataset_info = void 0;
          runs(function() {
            var promise;
            promise = bamboo.merge([dataset_id, dataset_id_to_merge]);
            promise.then(function(response) {
              merged_dataset_id = response.id;
            });
          });
          waitsFor(function() {
            return !!merged_dataset_id;
          });
          runs(function() {
            expect(merged_dataset_id).toBeDefined();
            retry_count = 0;
            merged_dataset_info = {
              id: merged_dataset_id,
              state: "pending"
            };
            data_ready_callback.call(merged_dataset_info);
          });
          waitsFor(function() {
            return merged_dataset_info !== void 0 && merged_dataset_info.state !== "pending";
          }, "merged dataset to be ready", BAMBOO_WAIT_TIME);
          runs(function() {
            bamboo.delete_dataset(merged_dataset_id);
          });
        });
      });
      describe("Row", function() {
        it("can query for a row", function() {
          var row;
          row = void 0;
          runs(function() {
            bamboo.get_row(dataset_id, 0).then(function(response) {
              row = response;
            });
          });
          waitsFor(function() {
            return !!row;
          }, "get row ro return", REQUEST_TIME);
          runs(function() {
            expect(row.name).toBeDefined();
          });
        });
        it("can delete a row", function() {
          var data;
          data = void 0;
          runs(function() {
            bamboo.delete_row(dataset_id, 0).then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          }, "delete row to return", REQUEST_TIME);
          runs(function() {
            expect(data.id).toBeDefined();
            expect(data.success).toBeDefined();
          });
        });
        it("can update a row", function() {
          var data, update_data;
          data = void 0;
          update_data = {
            grade: 7
          };
          runs(function() {
            bamboo.update_row(dataset_id, 0, update_data).then(function(response) {
              data = response;
            });
          });
          waitsFor(function() {
            return !!data;
          }, "update row to return", REQUEST_TIME);
          runs(function() {
            expect(data.id).toBeDefined();
            expect(data.success).toBeDefined();
          });
        });
      });
      describe("Dataset Object", function() {
        var ds;
        ds = void 0;
        beforeEach(function() {
          return ds = new bamboo.Dataset({
            id: dataset_id
          });
        });
        describe("load_from_url", function() {
          beforeEach(function() {
            spyOn(bamboo, 'create_dataset').andCallThrough();
            ds = new bamboo.Dataset({
              url: test_data.csv_file_url
            });
          });
          it("should call bamboo.create_dataset with the url passed in at construction", function() {
            expect(ds.id).toBeUndefined();
            expect(ds._ls.from_url).toBeUndefined();
            ds.load_from_url();
            expect(bamboo.create_dataset).toHaveBeenCalledWith(test_data.csv_file_url, false);
            expect(ds.id).toBeDefined();
            expect(ds._ls.from_url).toBeDefined();
          });
          it("should call bamboo.create_dataset with the provided url and async as true when specified", function() {
            var result;
            result = ds.load_from_url(test_data.csv_file_merge_url, function() {});
            expect(bamboo.create_dataset).toHaveBeenCalledWith(test_data.csv_file_merge_url, true);
            expect(result).toEqual(ds);
          });
        });
        describe("query_info", function() {
          beforeEach(function() {
            spyOn(bamboo, 'query_info').andCallThrough();
          });
          it("should call bamboo.query_info with async as false when called without a callback", function() {
            var result;
            expect(ds.info).toBeUndefined();
            result = ds.query_info();
            expect(bamboo.query_info).toHaveBeenCalledWith(dataset_id, false);
            expect(ds.info).toBeDefined();
            expect(result).toEqual(ds.info);
          });
          it("should call bamboo.query_info with async as true if a callback is specified", function() {
            var result;
            result = ds.query_info(function() {});
            expect(bamboo.query_info).toHaveBeenCalledWith(dataset_id, true);
            expect(result).toEqual(ds);
          });
        });
        describe("summary", function() {
          beforeEach(function() {
            spyOn(bamboo, 'summary').andCallThrough();
          });
          it("calls bamboo.summary with select as all by default", function() {
            var result;
            expect(ds.summary_result).toBeUndefined();
            result = ds.summary();
            expect(bamboo.summary).toHaveBeenCalledWith(dataset_id, "all", null, false);
            expect(ds.summary_result).toBeDefined();
            expect(ds._ls.summary_all).toBeDefined();
            expect(result).toEqual(ds.summary_result);
          });
          it("calls bamboo.summary with the specified args and async as true if a callback is specified", function() {
            var result;
            result = ds.summary({
              "grade": 1
            }, "sex", function() {});
            expect(bamboo.summary).toHaveBeenCalledWith(dataset_id, {
              "grade": 1
            }, "sex", true);
            expect(result).toEqual(ds);
          });
        });
        describe("query", function() {
          beforeEach(function() {
            spyOn(bamboo, 'query').andCallThrough();
          });
          it("calls bamboo.select with the specified select arg", function() {
            var result;
            result = ds.select({
              grade: 1
            });
            expect(bamboo.query).toHaveBeenCalledWith(dataset_id, void 0, {
              "grade": 1
            }, void 0, false);
            expect(result).toBeDefined();
            expect(result).toEqual(ds._selects['select_{"grade":1}']);
          });
          it("calls bamboo.select with the specified select arg and async as true if a callback is specified", function() {
            var result;
            result = ds.select({
              "grade": 1
            }, function() {});
            expect(bamboo.query).toHaveBeenCalledWith(dataset_id, void 0, {
              "grade": 1
            }, void 0, true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
          it(".query calls bamboo.query with a filter arg when its provided", function() {
            var result;
            result = ds.query({
              "grade": 4
            });
            expect(bamboo.query).toHaveBeenCalledWith(dataset_id, {
              "grade": 4
            }, void 0, void 0, false);
            expect(result).toBeDefined();
            expect(result).toEqual(ds._queries['query_{"grade":4}']);
          });
          it(".query calls bamboo.query with a filter arg when its provided and async as true if a callback is specified", function() {
            var result;
            result = ds.query({
              "grade": 4
            }, function() {});
            expect(bamboo.query).toHaveBeenCalledWith(dataset_id, {
              "grade": 4
            }, void 0, void 0, true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
          it(".query_dataset calls bamboo.query with a filter arg when its provided", function() {
            var result;
            result = ds.query_dataset();
            expect(bamboo.query).toHaveBeenCalledWith(dataset_id, void 0, void 0, void 0, false);
            expect(result).toBeDefined();
            expect(result).toEqual(ds.data);
          });
          it(".query_dataset calls bamboo.query with a filter arg when its provided and async as true if a callback is specified", function() {
            var result;
            result = ds.query_dataset(function() {});
            expect(bamboo.query).toHaveBeenCalledWith(dataset_id, void 0, void 0, void 0, true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
        });
        describe("add_calculation", function() {
          beforeEach(function() {
            spyOn(bamboo, 'add_calculation').andCallThrough();
          });
          it("should call bamboo.add_calculation with name and formula and async as false", function() {
            var result;
            result = ds.add_calculation("above_3rd_grade", "grade > 3");
            expect(bamboo.add_calculation).toHaveBeenCalledWith(dataset_id, "above_3rd_grade", "grade > 3", false);
            expect(result).toBeDefined();
            expect(result).toEqual('above_3rd_grade');
          });
          it("should call bamboo.add_calculation with name and formula and async as true if callback is specified", function() {
            var result;
            result = ds.add_calculation("above_3rd_grade", "grade > 3", function() {});
            expect(bamboo.add_calculation).toHaveBeenCalledWith(dataset_id, "above_3rd_grade", "grade > 3", true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
        });
        describe("query_calculations", function() {
          beforeEach(function() {
            spyOn(bamboo, 'query_calculations').andCallThrough();
          });
          it("should call bamboo.query_calculations with async as false", function() {
            var result;
            result = ds.query_calculations();
            expect(bamboo.query_calculations).toHaveBeenCalledWith(dataset_id, false);
            expect(result).toBeDefined();
            expect(result).toEqual(ds._calculations);
          });
          it("should call bamboo.query_calculations with async as true if a callback is specified", function() {
            var result;
            result = ds.query_calculations(function() {});
            expect(bamboo.query_calculations).toHaveBeenCalledWith(dataset_id, true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
        });
        describe("remove_calculation", function() {
          beforeEach(function() {
            spyOn(bamboo, 'remove_calculation').andCallThrough();
          });
          it("should call bamboo.remove_calculation with async as false", function() {
            var result;
            result = ds.remove_calculation("above_3rd_grade");
            expect(bamboo.remove_calculation).toHaveBeenCalledWith(dataset_id, "above_3rd_grade", false);
            expect(result).toBeDefined();
            expect(result).toEqual(ds._calculations);
          });
          it("should call bamboo.remove_calculation with async as true if a callback is specified", function() {
            var result;
            result = ds.remove_calculation("above_3rd_grade", function() {});
            expect(bamboo.remove_calculation).toHaveBeenCalledWith(dataset_id, "above_3rd_grade", true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
        });
        describe("add_aggregations", function() {
          beforeEach(function() {
            spyOn(bamboo, 'add_aggregation').andCallThrough();
          });
          it("should call bamboo.add_aggregation with name, formula and group and async as false", function() {
            var result;
            result = ds.add_aggregations("total_income", "sum(income)", ["sex"]);
            expect(bamboo.add_aggregation).toHaveBeenCalledWith(dataset_id, "total_income", "sum(income)", ["sex"], false);
            expect(result).toBeDefined();
            expect(result).toEqual('total_income');
          });
          it("should call bamboo.add_calculation with name and formula and async as true if callback is specified", function() {
            var result;
            result = ds.add_aggregations("total_income", "sum(income)", ["sex"], function() {});
            expect(bamboo.add_aggregation).toHaveBeenCalledWith(dataset_id, "total_income", "sum(income)", ["sex"], true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
        });
        describe("query_aggregations", function() {
          beforeEach(function() {
            spyOn(bamboo, 'query_aggregations').andCallThrough();
          });
          it("should call bamboo.query_aggregations with async as false", function() {
            var result;
            result = ds.query_aggregations();
            expect(bamboo.query_aggregations).toHaveBeenCalledWith(dataset_id, false);
            expect(result).toBeDefined();
            expect(result).toEqual(ds.aggregations);
          });
          it("should call bamboo.query_aggregations with async as true if a callback is specified", function() {
            var result;
            result = ds.query_aggregations(function() {});
            expect(bamboo.query_aggregations).toHaveBeenCalledWith(dataset_id, true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
        });
        describe("remove_aggregations", function() {
          beforeEach(function() {
            spyOn(bamboo, 'remove_aggregation').andCallThrough();
          });
          it("should call bamboo.remove_aggregation with async as false", function() {
            var result;
            result = ds.remove_aggregations("total_income");
            expect(bamboo.remove_aggregation).toHaveBeenCalledWith(dataset_id, "total_income", false);
            expect(result).toBeDefined();
            expect(result).toEqual(ds.aggregations);
          });
          it("should call bamboo.remove_aggregation with async as true if a callback is specified", function() {
            var result;
            result = ds.remove_aggregations("total_income", function() {});
            expect(bamboo.remove_aggregation).toHaveBeenCalledWith(dataset_id, "total_income", true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
        });
        describe("join", function() {
          var dataset_id_to_join;
          dataset_id_to_join = void 0;
          beforeEach(function() {
            join_dataset_info = void 0;
            spyOn(bamboo, 'join').andCallThrough();
            runs(function() {
              bamboo.create_dataset(test_data.csv_file_join_url).then(function(response) {
                dataset_id_to_join = response.id;
              });
            });
            waitsFor(function() {
              return !!dataset_id_to_join;
            }, "right hand side datasets to be created", 4000);
            runs(function() {
              retry_count = 0;
              join_dataset_info = {
                id: dataset_id_to_join,
                state: "pending"
              };
              data_ready_callback.call(join_dataset_info);
            });
            waitsFor(function() {
              return join_dataset_info !== void 0 && join_dataset_info.state !== "pending";
            }, "right hand side dataset to be ready", BAMBOO_WAIT_TIME);
          });
          it("should call bamboo.join with async as false", function() {
            var result;
            result = ds.join(dataset_id_to_join, "name");
            expect(bamboo.join).toHaveBeenCalledWith(dataset_id, dataset_id_to_join, "name", false);
            expect(result).toBeDefined();
            expect(result).toEqual(ds.joins);
          });
          it("should call bamboo.join with async as true if a callback is specified", function() {
            var result;
            result = ds.join(dataset_id_to_join, "name", function() {});
            expect(bamboo.join).toHaveBeenCalledWith(dataset_id, dataset_id_to_join, "name", true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
        });
        describe("merge", function() {
          var dataset_id_to_merge;
          dataset_id_to_merge = void 0;
          beforeEach(function() {
            var merge_dataset_info;
            merge_dataset_info = void 0;
            spyOn(bamboo, 'merge').andCallThrough();
            runs(function() {
              bamboo.create_dataset(test_data.csv_file_join_url).then(function(response) {
                dataset_id_to_merge = response.id;
              });
            });
            waitsFor(function() {
              return !!dataset_id_to_merge;
            }, "right hand side datasets to be created", 4000);
            runs(function() {
              retry_count = 0;
              merge_dataset_info = {
                id: dataset_id_to_merge,
                state: "pending"
              };
              data_ready_callback.call(merge_dataset_info);
            });
            waitsFor(function() {
              return merge_dataset_info !== void 0 && merge_dataset_info.state !== "pending";
            }, "right hand side dataset to be ready", BAMBOO_WAIT_TIME);
          });
          it("should call bamboo.merge with async as false", function() {
            var result;
            result = ds.merge([dataset_id, dataset_id_to_merge]);
            expect(bamboo.merge).toHaveBeenCalledWith([dataset_id, dataset_id_to_merge], false);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
          it("should call bamboo.merge with async as true if a callback is specified", function() {
            var result;
            result = ds.merge([dataset_id, dataset_id_to_merge], function() {});
            expect(bamboo.merge).toHaveBeenCalledWith([dataset_id, dataset_id_to_merge], true);
            expect(result).toBeDefined();
            expect(result).toEqual(ds);
          });
        });
        describe("update", function() {
          beforeEach(function() {
            spyOn(bamboo, 'update').andCallThrough();
          });
          it("should call bamboo.update with async as false", function() {
            var result, update_data;
            update_data = {
              name: "new_student",
              grade: 1,
              income: 30,
              sex: "M"
            };
            result = ds.update([update_data]);
            expect(bamboo.update).toHaveBeenCalledWith(dataset_id, [update_data], false);
          });
          it("should call bamboo.update with async as true if a callback is specified", function() {
            var result, update_data;
            update_data = {
              name: "new_student",
              grade: 1,
              income: 30,
              sex: "M"
            };
            result = ds.update([update_data], function() {});
            expect(bamboo.update).toHaveBeenCalledWith(dataset_id, [update_data], true);
          });
        });
        describe("delete", function() {
          beforeEach(function() {
            spyOn(bamboo, 'delete_dataset').andCallThrough();
          });
          it("should call bamboo.delete with async as false", function() {
            var result;
            result = ds["delete"]();
            expect(bamboo.delete_dataset).toHaveBeenCalledWith(dataset_id, false);
          });
          it("should call bamboo.delete with async as true if a callback is specified", function() {
            var result;
            result = ds["delete"](function() {});
            expect(bamboo.delete_dataset).toHaveBeenCalledWith(dataset_id, true);
          });
        });
      });
    });
  });

}).call(this);
