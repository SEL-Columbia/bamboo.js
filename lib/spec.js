// Generated by CoffeeScript 1.4.0
(function() {
  var bamboo_wait_time, callAjax, test_data;

  test_data = {
    csv_file: "https://www.dropbox.com/s/0m8smn04oti92gr/sample_dataset_school_survey.csv?dl=1"
  };

  bamboo_wait_time = 0;

  callAjax = function(xhrSettings) {
    var method, response;
    method = xhrSettings.type ? xhrSettings.type : "GET";
    try {
      response = mock_data.urls[xhrSettings.url][method];
      if (response === void 0) {
        throw new TypeError("urls." + xhrSettings.url + "." + method + " is not defined.");
      }
      xhrSettings.success.call(null, response);
    } catch (err) {
      xhrSettings.error.call();
    }
  };

  describe("Bamboo API", function() {
    beforeEach(function() {
      if (bamboo.settings.URL.match(/^http/)) {
        spyOn($, 'ajax').andCallThrough();
        bamboo_wait_time = 3000;
      } else {
        spyOn($, 'ajax').andCallFake(callAjax);
      }
    });
    it("distinguishes aggregations from calculations", function() {
      var false_st, false_st_2, true_st;
      true_st = bamboo.is_aggregation("sum(formula)");
      expect(true_st).toBeTruthy();
      false_st = bamboo.is_aggregation("murica");
      expect(false_st).not.toBeTruthy();
      false_st_2 = bamboo.is_aggregation("sum())");
      expect(false_st_2).not.toBeTruthy();
    });
    describe("Datasets", function() {
      it("can create from url", function() {
        var dataset;
        dataset = new bamboo.Dataset({
          url: test_data.csv_file,
          autoload: true
        });
        expect(dataset.id).toBeDefined();
        expect(dataset.query_info().info.id).toBe(dataset.id);
      });
      it("can delete by dataset id", function() {
        var dataset, deleted;
        dataset = new bamboo.Dataset({
          url: test_data.csv_file,
          autoload: true
        });
        expect(dataset.id).toBeDefined();
        deleted = dataset["delete"]();
        expect(deleted).toBeTruthy();
      });
      it("can check if dataset exists", function() {
        var dataset, exists;
        dataset = new bamboo.Dataset({
          url: test_data.csv_file,
          autoload: true
        });
        expect(dataset.id).toBeDefined();
        exists = bamboo.dataset_exists(dataset.id);
        expect(exists).toBeTruthy();
        exists = bamboo.dataset_exists("some-none-existsent-id");
        expect(exists).toBeFalsy();
      });
    });
    describe("Data APIs", function() {
      var dataset, loaded;
      loaded = false;
      dataset = void 0;
      beforeEach(function() {
        dataset = new bamboo.Dataset({
          url: test_data.csv_file,
          autoload: false
        });
        runs(function() {
          dataset.load_from_url(false, function() {
            return loaded = true;
          });
        });
        waitsFor(function() {
          return loaded;
        }, "dataset to load", 1000);
        runs(function() {
          return expect(dataset.id).toBeDefined();
        });
      });
      afterEach(function() {
        var deleted;
        deleted = dataset["delete"]();
        expect(deleted).toBeTruthy();
      });
      describe("Query API", function() {
        it("can query info", function() {
          expect(dataset.query_info().info.id).toBe(dataset.id);
          expect(dataset.info.num_rows).toBe(14);
        });
        it("can query data", function() {
          expect(dataset.data).not.toBeDefined();
          dataset.query_dataset();
          expect(dataset.data).toBeDefined();
        });
        it("can select from dataset", function() {
          var select;
          select = dataset.select({
            grade: 1
          });
          expect(select.length).toBe(14);
        });
        it("can run a filter query", function() {
          var query1;
          query1 = dataset.query({
            grade: 4
          });
          expect(query1.length).toBe(7);
        });
        it("can get the summary", function() {
          var group, select, summary;
          summary = dataset.summary();
          expect(dataset.summary_result).toBeDefined();
          select = {
            "grade": 1
          };
          summary = dataset.summary(select);
          expect(dataset._summaries["summary_" + (JSON.stringify(select))]).toBeDefined();
          group = "sex";
          summary = dataset.summary(select, group);
          expect(dataset._summaries["summary_" + (JSON.stringify(select)) + "_" + group]).toBeDefined();
        });
      });
      describe("Calculations API", function() {
        it("can add and remove simple calculation", function() {
          var calculation_name;
          loaded = false;
          calculation_name = "above_3rd_grade";
          waits(bamboo_wait_time);
          runs(function() {
            dataset.add_calculation(calculation_name, "grade > 3", function() {
              return loaded = true;
            });
          });
          waitsFor(function() {
            return loaded;
          }, "calculation to be ready", 1000);
          runs(function() {
            var found_calculation;
            expect(dataset.calculations).toBeDefined();
            found_calculation = _.find(dataset.calculations, function(calculation) {
              return calculation.name === calculation_name;
            });
            expect(found_calculation).toBeDefined();
          });
          waits(bamboo_wait_time);
          runs(function() {
            var found_calculation;
            dataset.remove_calculation(calculation_name);
            found_calculation = _.find(dataset.calculations, function(calculation) {
              return calculation.name === calculation_name;
            });
            expect(found_calculation).not.toBeDefined();
          });
        });
        it("can query calculations", function() {
          loaded = false;
          waits(bamboo_wait_time);
          runs(function() {
            expect(dataset.calculations).not.toBeDefined();
            dataset.query_calculations(function() {
              loaded = true;
            });
          });
          waitsFor(function() {
            return loaded;
          }, "calculation's query to return", 1000);
          runs(function() {
            expect(dataset.calculations).toBeDefined();
          });
        });
      });
      describe("Aggreations API", function() {
        beforeEach(function() {
          var response;
          loaded = false;
          response = void 0;
          waits(bamboo_wait_time);
          runs(function() {
            expect(dataset.aggregations).not.toBeDefined();
            dataset.add_aggregations("total_income", "sum(income)", null, function(r) {
              response = r;
              loaded = true;
            });
          });
          waitsFor(function() {
            return loaded;
          }, "add_aggregations to return", 1000);
          runs(function() {
            expect(response.success).toContain("created calculation");
          });
        });
        afterEach(function() {
          var response;
          response = void 0;
          runs(function() {
            dataset.remove_aggregations("total_income", function(r) {
              response = r;
            });
            expect(response.success).toContain("deleted calculation: 'total_income'");
          });
        });
        it("can query aggregations", function() {
          loaded = false;
          runs(function() {
            dataset.query_aggregations(function() {
              loaded = true;
            });
          });
          waitsFor(function() {
            return loaded;
          }, "query_aggregations to return", 1000);
          runs(function() {
            expect(dataset.aggregations).toBeDefined();
          });
        });
      });
      describe("Updates, joins and merges", function() {
        it("can update data in an dataset", function() {
          var response, update_data;
          response = void 0;
          update_data = {
            name: "new_student",
            grade: 1,
            income: 30,
            sex: "M"
          };
          runs(function() {
            dataset.update([update_data], function(r) {
              return response = r;
            });
          });
          runs(function() {
            return expect(response.id).toBeDefined();
          });
        });
      });
    });
  });

}).call(this);
