// Generated by CoffeeScript 1.4.0
(function() {
  var test_data, tmp_ds, _pick;

  test_data = {
    id: "fdf66b3a8a5b4617bd12f56e70e394a1",
    csv_file: "https://www.dropbox.com/s/0m8smn04oti92gr/sample_dataset_school_survey.csv?dl=1"
  };

  tmp_ds = "1325a517cc33443bbc2a09b39adae401";

  describe("bamboo api works", function() {
    beforeEach(function() {
      var _this = this;
      this.available_opts = {
        url: test_data.csv_file,
        autoload: false,
        id: test_data.id
      };
      return this.build_dataset = function(keys) {
        return new bamboo.Dataset(_pick(_this.available_opts, keys));
      };
    });
    it("can query for a new id", function() {
      var dataset;
      dataset = this.build_dataset('url', 'autoload');
      return expect(dataset.load_status('from_url')).toBe("not_started");
    });
    it("can access dataset info by existing id", function() {
      var dataset;
      dataset = this.build_dataset('id', 'autoload');
      expect(dataset.id).toBeDefined();
      expect(dataset.query_info().info.id).toBe(dataset.id);
      return expect(dataset.info.num_rows).toBe(14);
    });
    it("can query dataset", function() {
      var dataset;
      dataset = this.build_dataset('id', 'autoload');
      expect(dataset.data).not.toBeDefined();
      dataset.query_dataset();
      return expect(dataset.data).toBeDefined();
    });
    it("can select from dataset", function() {
      var dataset, select;
      dataset = this.build_dataset('id', 'autoload');
      select = dataset.select({
        grade: 1
      });
      return expect(select.length).toBe(14);
    });
    it("can query from dataset", function() {
      var dataset, query1, query2;
      dataset = this.build_dataset('id', 'autoload');
      query1 = dataset.query({
        grade: 4
      });
      expect(query1.length).toBe(7);
      query2 = dataset.query({
        grade: 3
      });
      return expect(query2.length).toBe(2);
    });
    it("can get the summary", function() {
      var dataset, summary;
      dataset = this.build_dataset('id', 'autoload');
      summary = dataset.summary();
      if (Object.keys != null) {
        return expect(Object.keys(summary).sort().join(', ')).toBe('grade, income, name, sex');
      }
    });
    it("can query summary", function() {
      var dataset, ss;
      dataset = this.build_dataset('id', 'autoload');
      ss = dataset.summary();
      return expect(dataset.summary_result).toBeDefined();
    });
    return it("can create and delete a dataset", function() {
      var new_set_id;
      new_set_id = false;
      runs(function() {
        var new_dataset;
        new_dataset = new bamboo.Dataset({
          url: test_data.csv_file,
          autoload: true
        });
        expect(new_dataset.id).toBeTruthy();
        new_set_id = new_dataset.id;
        log("Newly created dataset id: '" + new_set_id + "'");
        return expect(new_dataset["delete"]()).toBeTruthy();
      });
      waits(2000);
      return runs(function() {
        return expect(bamboo.dataset_exists(new_set_id)).not.toBeTruthy();
      });
    });
  });

  describe("calculations", function() {
    beforeEach(function() {
      return this.dataset = new bamboo.Dataset({
        url: test_data.csv_file,
        autoload: true
      });
    });
    afterEach(function() {
      return this.dataset["delete"]();
    });
    it("does regex", function() {
      var false_st, false_st_2, true_st;
      true_st = this.dataset._is_aggregation("sum(formula)");
      expect(true_st).toBeTruthy();
      false_st = this.dataset._is_aggregation("murica");
      expect(false_st).not.toBeTruthy();
      false_st_2 = this.dataset._is_aggregation("sum())");
      return expect(false_st_2).not.toBeTruthy();
    });
    it("adds and deletes simple calculation", function() {
      waits(3000);
      runs(function() {
        return this.dataset.add_calculation("above_3rd_grade", "grade > 3");
      });
      waits(3000);
      runs(function() {
        var queried_data;
        queried_data = this.dataset.query_dataset().data;
        return expect(queried_data[0].above_3rd_grade).toBeDefined();
      });
      waits(100);
      runs(function() {
        return this.dataset.remove_calculation("above_3rd_grade");
      });
      waits(3000);
      return runs(function() {
        var queried_data;
        queried_data = this.dataset.query_dataset().data;
        return expect(queried_data[0].above_3rd_grade).not.toBeDefined();
      });
    });
    it("can query an added calculation", function() {
      waits(3000);
      runs(function() {
        return this.dataset.add_calculation("above_3rd_grade", "grade > 3");
      });
      waits(3000);
      return runs(function() {
        this.dataset.query_calculations();
        expect(this.dataset.calculations).toBeDefined();
        expect(this.dataset.calculations[0]).toBeDefined();
        return expect(this.dataset.calculations[0].name).toEqual("above_3rd_grade");
      });
    });
    it("can add and remove aggregation", function() {
      waits(2000);
      runs(function() {
        return this.dataset.add_aggregations("total_income", "sum(income)");
      });
      waits(2000);
      return runs(function() {
        this.dataset.query_aggregations();
        expect(this.dataset.aggregations).toBeDefined();
        expect(this.dataset.aggregations[""]).toBeDefined();
        return this.dataset.remove_aggregations("total_income", function(err, ret) {
          return expect(ret).toContain("deleted calculation: 'total_income' for dataset:");
        });
      });
    });
    return it("can query aggregations", function() {
      waits(2000);
      runs(function() {
        return this.dataset.add_aggregations("total_income", "sum(income)");
      });
      waits(2000);
      return runs(function() {
        this.dataset.query_aggregations();
        expect(this.dataset.aggregations).toBeDefined();
        return expect(this.dataset.aggregations[""]).toBeDefined();
      });
    });
  });

  /*
  based on underscore.js _.pick
  */


  _pick = function(obj) {
    var copy, key, keys, _i, _len;
    copy = {};
    keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if (obj[key] != null) {
        copy[key] = obj[key];
      }
    }
    return copy;
  };

}).call(this);
